import numpy as np
import matplotlib.pyplot as plt

from fym.core import BaseEnv, BaseSystem
from fym.utils.rot import dcm2quat, quat2dcm, angle2quat, quat2angle
import fym.logging


class Mixer:
    """Definition:
        Mixer takes force commands and translate them to actuator commands.
        Actuator commands here mean the force generated by each rotor.
    """
    def __init__(self, rtype, d, c):
        b = 1

        if rtype == "quad":
            B = np.array(
                [[1, 1, 1, 1],
                 [0, -d, 0, d],
                 [d, 0, -d, 0],
                 [-c, c, -c, c]]
            )

        elif rtype == "hexa-x":
            B = np.array(
                [[b, b, b, b, b, b],
                 [-b*d, b*d, b*d/2, -b*d/2, -b*d/2, b*d/2],
                 [0, 0, b*d*np.sqrt(3)/2, -b*d*np.sqrt(3)/2, b*d*np.sqrt(3)/2,
                  -b*d*np.sqrt(3)/2],
                 [c, -c, c, -c, -c, c]]
            )

        elif rtype == "hexa-+":
            B = np.array(
                [[b, b, b, b, b, b],
                 [0, 0, b*d*np.sqrt(3)/2, -b*d*np.sqrt(3)/2, b*d*np.sqrt(3)/2,
                  -b*d*np.sqrt(3)/2],
                 [-b*d, b*d, b*d/2, -b*d/2, -b*d/2, b*d/2],
                 [c, -c, c, -c, -c, c]]
            )

        else:
            B = np.eye(4)

        self.B = B
        self.Binv = np.linalg.pinv(B)

    def inverse(self, rotors):
        return self.B.dot(rotors)

    def __call__(self, forces):
        return self.Binv.dot(forces)


class Multicopter(BaseEnv):
    """Reference:
        Prof. Taeyoung Lee's model for quadrotor UAV is used.
        - (https://www.math.ucsd.edu/~mleok/pdf/LeLeMc2010_quadrotor.pdf)
    """
    J = np.diag([0.0820, 0.0845, 0.1377])  # kg * m^2
    Jinv = np.linalg.inv(J)
    m = 4.34  # kg
    d = 0.0315  # m
    c = 8.004e-4  # m
    g = 9.81  # m/s^2
    rotor_max = 100
    rotor_min = 0

    def __init__(self,
                 pos=np.zeros((3, 1)),
                 vel=np.zeros((3, 1)),
                 quat=np.vstack((1, 0, 0, 0)),
                 omega=np.zeros((3, 1)),
                 rotors=np.zeros((6, 1)),
                 rtype="hexa-x"):
        super().__init__(dt=0.1, max_t=10)
        self.pos = BaseSystem(pos)
        self.vel = BaseSystem(vel)
        self.quat = BaseSystem(quat)
        self.omega = BaseSystem(omega)

        self.mixer = Mixer(rtype, d=self.d, c=self.c)

        self.rotors = rotors

    def deriv(self, pos, vel, quat, omega):
        F, M1, M2, M3 = self.mixer.inverse(self.rotors)

        M = np.vstack((M1, M2, M3))

        m, g, J = self.m, self.g, self.J
        e3 = np.vstack((0, 0, 1))

        dpos = vel
        dcm = quat2dcm(quat)
        dvel = g*e3 - F*dcm.dot(e3)/m
        dquat = 0.5 * np.vstack((
            -omega.T.dot(quat[1:]),
            omega*quat[0] - np.cross(omega, quat[1:], axis=0)
        ))
        domeg = self.Jinv.dot(M - np.cross(omega, J.dot(omega), axis=0))

        return dpos, dvel, dquat, domeg

    def set_dot(self, t):
        states = self.observe_list()
        dots = self.deriv(*states)
        self.pos.dot, self.vel.dot, self.quat.dot, self.omega.dot = dots

    def reset(self):
        super().reset()

    def step(self):
        t = self.clock.get()
        pos = self.pos.state
        vel = self.vel.state
        quat = self.quat.state
        omega = self.omega.state

        *_, done = self.update()
        return t, pos, vel, quat, omega, done


def run(rotors):
    system = Multicopter(rotors=rotors)
    pos = system.reset()
    vel = system.reset()
    quat = system.reset()
    omega = system.reset()
    system.logger = fym.logging.Logger(path='data.h5')

    while True:
        system.render()
        t, pos, vel, quat, omega, done = system.step()
        system.logger.record(t=t, pos=pos, vel=vel, quat=quat, omega=omega)

        if done:
            break

    system.close()


def plot_var():
    data = fym.logging.load('data.h5')
    fig = plt.figure()

    fig = plt.figure()
    ax1 = fig.add_subplot(4, 1, 1)
    ax2 = fig.add_subplot(4, 1, 2, sharex=ax1)
    ax3 = fig.add_subplot(4, 1, 3, sharex=ax1)
    ax4 = fig.add_subplot(4, 1, 4, sharex=ax1)

    ax1.plot(data['t'], data['pos'].squeeze())
    ax2.plot(data['t'], data['vel'].squeeze())
    ax3.plot(data['t'], data['quat'].squeeze())
    ax4.plot(data['t'], data['omega'].squeeze())

    ax1.set_ylabel('Position')
    ax1.legend([r'$x$', r'$y$', r'$z$'])

    ax2.set_ylabel('Velocity')
    ax2.legend([r'$u$', r'$v$', r'$w$'])

    ax3.set_ylabel('Quaternion')
    ax3.legend([r'$q_0$', r'$q_1$', r'$q_2$', r'$q_3$'])

    ax4.set_ylabel('Angular Velocity')
    ax4.legend([r'$p$', r'$q$', r'$r$'])
    ax4.set_xlabel('Time [sec]')

    plt.tight_layout()


# input값 조절 가능
rotors = 50*np.zeros((6, 1))
run(rotors)
plot_var()
plt.show()
