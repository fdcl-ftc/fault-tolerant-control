import fym
import numpy as np
from fym.core import BaseEnv, BaseSystem
from fym.utils.rot import angle2quat, dcm2quat, quat2angle, quat2dcm


class Mixer:
    """Definition:
    Mixer takes force commands and translate them to actuator commands.
    Actuator commands here mean the force generated by each rotor.
    """

    def __init__(self, d, c, b):
        rtype = cfg.mixer.rtype

        if rtype == "quad":
            B = np.array([[1, 1, 1, 1], [0, -d, 0, d], [d, 0, -d, 0], [-c, c, -c, c]])

        elif rtype == "hexa-x":
            b = 1
            B = np.array(
                [
                    [b, b, b, b, b, b],
                    [-b * d, b * d, b * d / 2, -b * d / 2, -b * d / 2, b * d / 2],
                    [
                        0,
                        0,
                        b * d * np.sqrt(3) / 2,
                        -b * d * np.sqrt(3) / 2,
                        b * d * np.sqrt(3) / 2,
                        -b * d * np.sqrt(3) / 2,
                    ],
                    [-c, c, -c, c, c, -c],
                ]
            )

        elif rtype == "hexa-+":
            b = 1
            B = np.array(
                [
                    [b, b, b, b, b, b],
                    [
                        0,
                        0,
                        b * d * np.sqrt(3) / 2,
                        -b * d * np.sqrt(3) / 2,
                        b * d * np.sqrt(3) / 2,
                        -b * d * np.sqrt(3) / 2,
                    ],
                    [-b * d, b * d, b * d / 2, -b * d / 2, -b * d / 2, b * d / 2],
                    [-c, c, -c, c, c, -c],
                ]
            )
            self.b_gyro = np.vstack((1, -1, 1, -1, 1, -1))

            s2 = 1 / 2
            s3 = np.sqrt(3) / 2
            self.d_rotor = np.array(
                [
                    [d, 0, 0],
                    [d * s2, -d * s3, 0],
                    [-d * s2, -d * s3, 0],
                    [-d, 0, 0],
                    [-d * s2, d * s3, 0],
                    [d * s2, d * s3, 0],
                ]
            )

        elif rtype == "hexa-falconi":
            B = np.array(
                [
                    [b, b, b, b, b, b],
                    [
                        0.5 * d * b,
                        d * b,
                        0.5 * d * b,
                        -0.5 * d * b,
                        -d * b,
                        -0.5 * d * b,
                    ],
                    [
                        0.5 * np.sqrt(3) * d * b,
                        0,
                        -0.5 * np.sqrt(3) * d * b,
                        -0.5 * np.sqrt(3) * d * b,
                        0,
                        0.5 * np.sqrt(3) * d * b,
                    ],
                    [c, -c, c, -c, c, -c],
                ]
            )

        else:
            B = np.eye(4)

        self.b = b
        self.B = B
        self.Binv = np.linalg.pinv(B)

    def inverse(self, rotors):
        return self.B.dot(rotors)

    def __call__(self, forces):
        return self.Binv.dot(forces)


class Multicopter(BaseEnv):
    """Multicopter Model
    Variables:
        pos: position in I-coord
        vel: velocity in I-coord
        quat: unit quaternion.
            Corresponding to the rotation matrix from I- to B-coord.

    Drag model [1]:
        self.M_gyroscopic
        self.A_drag
        self.B_drag
        self.D_drag
        - Note: orientation `R` in the paper is `dcm.T`

    References:
        [1] M. Faessler, A. Franchi, and D. Scaramuzza, “Differential Flatness of Quadrotor Dynamics Subject to Rotor Drag for Accurate Tracking of High-Speed Trajectories,” IEEE Robot. Autom. Lett., vol. 3, no. 2, pp. 620–626, Apr. 2018, doi: 10.1109/LRA.2017.2776353.
    """

    def __init__(
        self,
        pos,
        vel,
        quat,
        omega,
        dx=0.0,
        dy=0.0,
        dz=0.0,
    ):
        super().__init__()
        self.pos = BaseSystem(pos)
        self.vel = BaseSystem(vel)
        self.quat = BaseSystem(quat)
        self.omega = BaseSystem(omega)

        fym.parser.update(
            cfg.physProp, fym.parser.decode(cfg.physPropBy)[cfg.modelFrom]
        )
        for k, v in fym.parser.decode(cfg.physProp).items():
            self.__setattr__(k, v)

        self.Jinv = np.linalg.inv(self.J)
        self.M_gyroscopic = np.zeros((3, 1))
        self.A_drag = np.diag(np.zeros(3))  # currently ignored
        self.B_drag = np.diag(np.zeros(3))  # currently ignored
        self.D_drag = np.diag([dx, dy, dz])
        self.mixer = Mixer(d=self.d, c=self.c, b=self.b)

    def deriv(self, pos, vel, quat, omega, rotors):
        F, M1, M2, M3 = self.mixer.inverse(rotors)

        M = np.vstack((M1, M2, M3))

        m, g, J = self.m, self.g, self.J
        e3 = np.vstack((0, 0, 1))

        dpos = vel
        dcm = quat2dcm(quat)
        dvel = g * e3 - F * dcm.T.dot(e3) / m - dcm.T.dot(self.D_drag).dot(dcm).dot(vel)
        # DCM integration (Note: dcm; I to B) [1]
        p, q, r = np.ravel(omega)
        # unit quaternion integration [4]
        dquat = 0.5 * np.array(
            [[0.0, -p, -q, -r], [p, 0.0, r, -q], [q, -r, 0.0, p], [r, q, -p, 0.0]]
        ).dot(quat)
        eps = 1 - (quat[0] ** 2 + quat[1] ** 2 + quat[2] ** 2 + quat[3] ** 2)
        k = 1
        dquat = dquat + k * eps * quat
        domega = self.Jinv.dot(
            M
            - np.cross(omega, J.dot(omega), axis=0)
            - self.M_gyroscopic
            - self.A_drag.dot(dcm).dot(vel)
            - self.B_drag.dot(omega)
        )

        return dpos, dvel, dquat, domega

    def set_dot(self, t, rotors):
        states = self.observe_list()
        dots = self.deriv(*states, rotors)
        self.pos.dot, self.vel.dot, self.quat.dot, self.omega.dot = dots


if __name__ == "__main__":
    system = Multicopter()
    system.set_dot(t=0, rotors=np.zeros((6, 1)))
    print(repr(system))
